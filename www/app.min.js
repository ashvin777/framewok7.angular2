function initialize() {

  window.application = new Framework7({
    modalTitle: 'Framework7',
    material: true,
    pushState: true
  });

  var LibModule = ng.core.NgModule({
    imports: [ng.forms.FormsModule]
  }).Class({
    constructor: function() {

    }
  });

  var BodyComponent = ng.core.Component({
    selector: 'body',
    template: '<router-outlet></router-outlet>'
  }).Class({
    constructor: function() {}
  });

  var MainModule = ng.core.NgModule({
      imports: [
        ng.platformBrowser.BrowserModule,
        LibModule,
        Router()
      ],
      declarations: [
        BodyComponent,
        MainLayoutComponent(),
        HomePageComponent(),
        AboutPageComponent(),
        AccordionPageComponent(),
        AutoCompletePageComponent(),
        CalendarPageComponent(),
        CardsPageComponent(),
        ContactsPageComponent(),
        ChipsPageComponent(),
        FloatingButtonPageComponent(),
        FloatingButtonStaticPageComponent(),
        FloatingButtonPopoverPageComponent(),
        FloatingButtonDialPageComponent(),
        FormsPageComponent(),
        FormsButtonsPageComponent(),
        FormsCheckboxesPageComponent(),
        FormsElementsPageComponent(),
        FormsSelectsPageComponent(),
        FormsStoragePageComponent(),
        InfiniteScrollPageComponent(),
        ListViewPageComponent(),
        LazyLoadPageComponent(),
        GridPageComponent(),
        LoginScreenPageComponent(),
        LoginScreenEmbeddedPageComponent(),
        MediaListPageComponent(),
        MessagesPageComponent(),
        ModalsPageComponent(),
        NotificationsPageComponent(),
        PanelsPageComponent(),
        PanelLeftPageComponent(),
        PanelRightPageComponent(),
        PanelRight2PageComponent(),
        PanelRight3PageComponent(),
        PhotoBrowserPageComponent(),
        PickerPageComponent(),
        PopoverPageComponent(),
        PreloaderPageComponent(),
        ProgressBarPageComponent(),
        PullToRefreshPageComponent(),
        SearchbarPageComponent(),
        SortableListPageComponent(),
        VirtualListPageComponent(),
        SwipeDeletePageComponent(),
        Swiper3DCoverflowPageComponent(),
        Swiper3DCubePageComponent(),
        Swiper3dFlipPageComponent(),
        SwiperControlPageComponent(),
        SwiperCustomPageComponent(),
        SwiperFadePageComponent(),
        SwiperGalleryPageComponent(),
        SwiperHorizontalPageComponent(),
        SwiperLoopPageComponent(),
        SwiperMultiplePageComponent(),
        SwiperNestedPageComponent(),
        SwiperPaginationFractionPageComponent(),
        SwiperPaginationProgressPageComponent(),
        SwiperParallaxPageComponent(),
        SwiperScrollbarPageComponent(),
        SwiperSpaceBetweenPageComponent(),
        SwiperVerticlePageComponent(),
        SwiperPageComponent(),
        TabsAnimatedPageComponent(),
        TabsStaticPageComponent(),
        TabsSwipeablePageComponent(),
        TabsPageComponent(),
        Autocomplete(),
        Calendar()
      ],
      bootstrap: [BodyComponent],
      providers: []
    })
    .Class({
      constructor: function() {}
    });

  ng.platformBrowserDynamic
    .platformBrowserDynamic()
    .bootstrapModule(MainModule);
}
document.addEventListener('DOMContentLoaded', initialize);

function Router() {
  return ng.router.RouterModule.forRoot([{
    path: '',
    redirectTo: 'home',
    pathMatch: 'full'
  },{
    path: '',
    component: MainLayoutComponent(),
    children: [{
      path: 'home',
      component: HomePageComponent()
    },{
      path: 'about',
      component: AboutPageComponent()
    },{
      path: 'accordion',
      component: AccordionPageComponent()
    },{
      path: 'autocomplete',
      component: AutoCompletePageComponent()
    },{
      path: 'calendar',
      component: CalendarPageComponent()
    },{
      path: 'cards',
      component: CardsPageComponent()
    },{
      path: 'contacts',
      component: ContactsPageComponent()
    },{
      path: 'chips',
      component: ChipsPageComponent()
    },{
      path: 'floating-button',
      component: FloatingButtonPageComponent()
    },{
      path: 'floating-button-static',
      component: FloatingButtonStaticPageComponent()
    },{
      path: 'floating-button-popover',
      component: FloatingButtonPopoverPageComponent()
    },{
      path: 'floating-button-dial',
      component: FloatingButtonDialPageComponent()
    },{
      path: 'forms',
      component: FormsPageComponent()
    },{
      path: 'forms-elements',
      component: FormsElementsPageComponent()
    },{
      path: 'forms-checkboxes',
      component: FormsCheckboxesPageComponent()
    },{
      path: 'forms-selects',
      component: FormsSelectsPageComponent()
    },{
      path: 'forms-buttons',
      component: FormsButtonsPageComponent()
    },{
      path: 'forms-storage',
      component: FormsStoragePageComponent()
    },{
      path: 'grid',
      component: GridPageComponent()
    },{
      path: 'infinite-scroll',
      component: InfiniteScrollPageComponent()
    },{
      path: 'lazy-load',
      component: LazyLoadPageComponent()
    },{
      path: 'list-view',
      component: ListViewPageComponent()
    },{
      path: 'login-screen-embedded',
      component: LoginScreenEmbeddedPageComponent()
    },{
      path: 'login-screen',
      component: LoginScreenPageComponent()
    },{
      path: 'media-lists',
      component: MediaListPageComponent()
    },{
      path: 'messages',
      component: MessagesPageComponent()
    },{
      path: 'modals',
      component: ModalsPageComponent()
    },{
      path: 'notifications',
      component: NotificationsPageComponent()
    },{
      path: 'panels',
      component: PanelsPageComponent()
    },{
      path: 'panel-left',
      component: PanelLeftPageComponent()
    },{
      path: 'panel-right',
      component: PanelRightPageComponent()
    },{
      path: 'panel-right2',
      component: PanelRight2PageComponent()
    },{
      path: 'panel-right3',
      component: PanelRight3PageComponent()
    },{
      path: 'photo-browser',
      component: PhotoBrowserPageComponent()
    },{
      path: 'picker',
      component: PickerPageComponent()
    },{
      path: 'popover',
      component: PopoverPageComponent()
    },{
      path: 'preloader',
      component: PreloaderPageComponent()
    },{
      path: 'progressbar',
      component: ProgressBarPageComponent()
    },{
      path: 'pull-to-refresh',
      component: PullToRefreshPageComponent()
    },{
      path: 'searchbar',
      component: SearchbarPageComponent()
    },{
      path: 'sortable-list',
      component: SortableListPageComponent()
    },{
      path: 'virtual-list',
      component: VirtualListPageComponent()
    },{
      path: 'swipe-delete',
      component: SwipeDeletePageComponent()
    },{
      path: 'swiper-3d-coverflow',
      component: Swiper3DCoverflowPageComponent()
    },{
      path: 'swiper-3d-cube',
      component: Swiper3DCubePageComponent()
    },{
      path: 'swiper-3d-flip',
      component: Swiper3dFlipPageComponent()
    },{
      path: 'swiper-control',
      component: SwiperControlPageComponent()
    },{
      path: 'swiper-custom',
      component: SwiperCustomPageComponent()
    },{
      path: 'swiper-fade',
      component: SwiperFadePageComponent()
    },{
      path: 'swiper-gallery',
      component: SwiperGalleryPageComponent()
    },{
      path: 'swiper-horizontal',
      component: SwiperHorizontalPageComponent()
    },{
      path: 'swiper-loop',
      component: SwiperLoopPageComponent()
    },{
      path: 'swiper-multiple',
      component: SwiperMultiplePageComponent()
    },{
      path: 'swiper-nested',
      component: SwiperNestedPageComponent()
    },{
      path: 'swiper-pagination-fraction',
      component: SwiperPaginationFractionPageComponent()
    },{
      path: 'swiper-pagination-progress',
      component: SwiperPaginationProgressPageComponent()
    },{
      path: 'swiper-parallax',
      component: SwiperParallaxPageComponent()
    },{
      path: 'swiper-scrollbar',
      component: SwiperScrollbarPageComponent()
    },{
      path: 'swiper-space-between',
      component: SwiperSpaceBetweenPageComponent()
    },{
      path: 'swiper-verticle',
      component: SwiperVerticlePageComponent()
    },{
      path: 'swiper',
      component: SwiperPageComponent()
    },{
      path: 'tabs-animated',
      component: TabsAnimatedPageComponent()
    },{
      path: 'tabs-static',
      component: TabsStaticPageComponent()
    },{
      path: 'tabs-swipeable',
      component: TabsSwipeablePageComponent()
    },{
      path: 'tabs',
      component: TabsPageComponent()
    }]
  }], {
    useHash: true
  });
}



function NavIgnore() {
  return ng.core.Directive({
    selector: "[navIgnore]",
    host: { // tslint:disable-line:use-host-property-decorator
      '(click)': 'handleClick($event)',
    }
  }).Class({
    constructor: [ng.router.Router, function(router) {
      this.router = router;
    }],
    handleClick: function functionName($event) {
      var subscription = this.router.events.subscribe(function(routerEvent) {
        console.log(routerEvent);
        if (routerEvent instanceof ng.router.NavigationEnd) {
          subscription.unsubscribe();
        } else if (routerEvent instanceof ng.router.NavigationError || routerEvent instanceof ng.router.NavigationCancel) {
          subscription.unsubscribe();
        }
      });
      return false;
    }
  });
}

function Autocomplete() {
  return ng.core.Directive({
    selector: "[autocomplete]",
    inputs: ["autocomplete"]
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element.nativeElement;
    }],
    ngOnInit: function() {
      if (this.$element.tagName.toLowerCase() == 'input') {
        this.autocomplete.input = this.$element;
      } else {
        this.autocomplete.opener = this.$element;
      };
      window.application.autocomplete(this.autocomplete);
    },
  });
}

function Calendar() {
  return ng.core.Directive({
    selector: "[calendar]",
    inputs: ["calendar"]
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element.nativeElement;
    }],
    ngOnInit: function() {
      if (this.$element.tagName.toLowerCase() == 'input') {
        this.calendar.input = this.$element;
      } else {
        this.calendar.container = this.$element;
      };
      window.application.calendar(this.calendar);
    },
  });
}

function MainLayoutComponent() {
  return ng.core.Component({
    templateUrl: "src/layout/main-layout/main-layout.html"
  }).Class({
    constructor: function() {

    },
    ngAfterViewInit: function() {
      window.application.addView('.view-main', {});
    }
  });
}

function AboutPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/about/about.html"
  }).Class({
    constructor: function() {

    }
  });
}

function AccordionPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/accordion/accordion.html"
  }).Class({
    constructor: function() {

    }
  });
}

function AutoCompletePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/autocomplete/autocomplete.html"
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element;
      this.fruits = ('Apple Apricot Avocado Banana Melon Orange Peach Pear Pineapple').split(' ');

      this.simpleAutocomplete = {
        openIn: 'dropdown',
        source: this.simpleAutocompleteSource.bind(this)
      };

      this.autocompleteDropdownAll = {
        openIn: 'dropdown',
        source: this.autocompleteDropdownAllSource.bind(this)
      };

      this.autocompleteDropdownPlaceholder = {
        openIn: 'dropdown',
        dropdownPlaceholderText: 'Try to type "Apple"',
        source: this.autocompleteDropdownPlaceholderSource.bind(this)
      };

      this.autocompleteDropdownAjax = {
        openIn: 'dropdown',
        preloader: true, //enable preloader
        valueProperty: 'id', //object's "value" property name
        textProperty: 'name', //object's "text" property name
        limit: 20, //limit to 20 results
        dropdownPlaceholderText: 'Try "JavaScript"',
        source: this.autocompleteDropdownAjaxSource.bind(this)
      };

      this.autocompleteStandaloneSimple = {
        openIn: 'popup', //open in page
        backOnSelect: true, //go back after we select something
        source: this.autocompleteStandaloneSimpleSource.bind(this),
        onChange: this.autocompleteStandaloneSimpleOnChange.bind(this)
      };

      // Standalone Popup
      this.autocompleteStandalonePopup = {
        openIn: 'popup', //open in page
        backOnSelect: true, //go back after we select something
        source: this.autocompleteStandalonePopupSource.bind(this),
        onChange: this.autocompleteStandalonePopupOnChange.bind(this)
      };

      // Multiple Standalone
      this.autocompleteStandaloneMultiple = {
        openIn: 'popup', //open in page
        multiple: true, //allow multiple values
        source: this.autocompleteStandaloneMultipleSource.bind(this),
        onChange: this.autocompleteStandaloneMultipleOnChange.bind(this)
      };

      // Standalone With Ajax
      this.autocompleteStandaloneAjax = {
        openIn: 'popup', //open in page
        multiple: true, //allow multiple values
        valueProperty: 'id', //object's "value" property name
        textProperty: 'name', //object's "text" property name
        limit: 50,
        preloader: true, //enable preloader
        preloaderColor: 'white', //preloader color
        source: this.autocompleteStandaloneAjaxSource.bind(this),
        onChange: this.autocompleteStandaloneAjaxOnChange.bind(this)
      };
    }],
    simpleAutocompleteSource: function(autocomplete, query, render) {
      this.fruits = ('Apple Apricot Avocado Banana Melon Orange Peach Pear Pineapple').split(' ');
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Find matched items
      for (var i = 0; i < this.fruits.length; i++) {
        if (this.fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(this.fruits[i]);
      }
      // Render items by passing array with result items
      render(results);
    },
    autocompleteDropdownAllSource: function(autocomplete, query, render) {
      this.fruits = ('Apple Apricot Avocado Banana Melon Orange Peach Pear Pineapple').split(' ');
      var results = [];
      // Find matched items
      for (var i = 0; i < this.fruits.length; i++) {
        if (this.fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(this.fruits[i]);
      }
      // Render items by passing array with result items
      render(results);
    },
    autocompleteDropdownPlaceholderSource: function(autocomplete, query, render) {
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Find matched items
      for (var i = 0; i < this.fruits.length; i++) {
        if (this.fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(this.fruits[i]);
      }
      // Render items by passing array with result items
      render(results);
    },
    autocompleteDropdownAjaxSource: function(autocomplete, query, render) {
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Show Preloader
      autocomplete.showPreloader();
      // Do Ajax request to Autocomplete data
      Dom7.ajax({
        url: 'js/autocomplete-languages.json',
        method: 'GET',
        dataType: 'json',
        //send "query" to server. Useful in case you generate response dynamically
        data: {
          query: query
        },
        success: function(data) {
          // Find matched items
          for (var i = 0; i < data.length; i++) {
            if (data[i].name.toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(data[i]);
          }
          // Hide Preoloader
          autocomplete.hidePreloader();
          // Render items by passing array with result items
          render(results);
        }
      });
    },
    autocompleteStandaloneSimpleSource: function(autocomplete, query, render) {
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Find matched items
      for (var i = 0; i < this.fruits.length; i++) {
        if (this.fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(this.fruits[i]);
      }
      // Render items by passing array with result items
      render(results);
    },
    autocompleteStandaloneSimpleOnChange: function(autocomplete, value) {

      // console.log( autocomplete.opener );
      // Add item text value to item-after
      autocomplete.opener.find('.item-after').text(value[0]);
      // Add item value to input value
      autocomplete.opener.find('input').val(value[0]);
    },
    autocompleteStandalonePopupSource: function(autocomplete, query, render) {
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Find matched items
      for (var i = 0; i < this.fruits.length; i++) {
        if (this.fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(this.fruits[i]);
      }
      // Render items by passing array with result items
      render(results);
    },
    autocompleteStandalonePopupOnChange: function(autocomplete, value) {
      // Add item text value to item-after
      autocomplete.opener.find('.item-after').text(value[0]);
      // Add item value to input value
      autocomplete.opener.find('input').val(value[0]);
    },
    autocompleteStandaloneMultipleSource: function(autocomplete, query, render) {
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Find matched items
      for (var i = 0; i < this.fruits.length; i++) {
        if (this.fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(this.fruits[i]);
      }
      // Render items by passing array with result items
      render(results);
    },
    autocompleteStandaloneMultipleOnChange: function(autocomplete, value) {
      // Add item text value to item-after
      autocomplete.opener.find('.item-after').text(value.join(', '));
      // Add item value to input value
      autocomplete.opener.find('input').val(value.join(', '));
    },
    autocompleteStandaloneAjaxSource: function(autocomplete, query, render) {
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Show Preloader
      autocomplete.showPreloader();
      // Do Ajax request to Autocomplete data
      Dom7.ajax({
        url: 'js/autocomplete-languages.json',
        method: 'GET',
        dataType: 'json',
        //send "query" to server. Useful in case you generate response dynamically
        data: {
          query: query
        },
        success: function(data) {
          // Find matched items
          for (var i = 0; i < data.length; i++) {
            if (data[i].name.toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(data[i]);
          }
          // Hide Preoloader
          autocomplete.hidePreloader();
          // Render items by passing array with result items
          render(results);
        }
      });
    },
    autocompleteStandaloneAjaxOnChange: function(autocomplete, value) {
      var itemText = [],
        inputValue = [];
      for (var i = 0; i < value.length; i++) {
        itemText.push(value[i].name);
        inputValue.push(value[i].id);
      }
      // Add item text value to item-after
      autocomplete.opener.find('.item-after').text(itemText.join(', '));
      // Add item value to input value
      autocomplete.opener.find('input').val(inputValue.join(', '));
    }
  });
}

function BarsDeepNavBar2PageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-deep-navbar-2.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsDeepNavBar3PageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-deep-navbar-3.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsDeepNavBarPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-deep-navbar.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsHideOnScrollPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-hide-on-scroll.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsHidePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-hide.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsNoNavbarToolbarPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-no-navbar-toolbar.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsNoNavbarPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-no-navbar.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsNoToolbarPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-no-toolbar.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsSubNavbarTitlePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-sub-navbar-title.htm"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsSubNavbarPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-sub-navbar.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsTabbarLabelsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-tabbar-labels.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsTabbarScrollablePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-tabbar-scrollable.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsTabbarPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-tabbar.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsToolbarBottomPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars-toolbar-bottom.html"
  }).Class({
    constructor: function() {

    }
  });
}

function BarsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/bars/bars.html"
  }).Class({
    constructor: function() {

    }
  });
}

function CalendarPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/calendar/calendar.html"
  }).Class({
    constructor: function() {
      this.monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

      this.calendarDefault = {};

      this.calendarDateFormat = {
        dateFormat: 'DD, MM dd, yyyy'
      };

      this.calendarMultiple = {
        dateFormat: 'M dd yyyy',
        multiple: true
      };
      this.calendarRange = {
        dateFormat: 'M dd yyyy',
        rangePicker: true
      };

      this.calendarInline = {
        value: [new Date()],
        weekHeader: false,
        header: false,
        footer: false,
        toolbarTemplate: this.getToolbarTemplate(),
        onOpen: this.onOpen.bind(this),
        onMonthYearChangeStart: this.onMonthYearChangeStart.bind(this)
      };
    },
    getToolbarTemplate: function() {
      return '<div class="toolbar calendar-custom-toolbar">' +
        '<div class="toolbar-inner">' +
        '<div class="left">' +
        '<a href="#" class="link icon-only"><i class="icon icon-back"></i></a>' +
        '</div>' +
        '<div class="center"></div>' +
        '<div class="right">' +
        '<a href="#" class="link icon-only"><i class="icon icon-forward"></i></a>' +
        '</div>' +
        '</div>' +
        '</div>';
    },
    onOpen: function(p) {
      Dom7('.calendar-custom-toolbar .center').text(this.monthNames[p.currentMonth] + ', ' + p.currentYear);
      Dom7('.calendar-custom-toolbar .left .link').on('click', function() {
        p.prevMonth();
      });
      Dom7('.calendar-custom-toolbar .right .link').on('click', function() {
        p.nextMonth();
      });
    },
    onMonthYearChangeStart: function(p) {
      Dom7('.calendar-custom-toolbar .center').text(this.monthNames[p.currentMonth] + ', ' + p.currentYear);
    }
  })
}

function CardsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/cards/cards.html"
  }).Class({
    constructor: function() {}
  })
}

function ChipsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/chips/chips.html"
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element.nativeElement;
    }],
    ngAfterViewInit: function() {
      Dom7(this.$element).find('.chip-delete').on('click', function(e) {
        e.preventDefault();
        var chip = Dom7(this).parents('.chip');
        window.application.confirm('Do you want to delete this tiny demo Chip?', function() {
          chip.remove();
        });
      });
    }
  });
}

function ColorThemesPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/color-themes/color-themes.html"
  }).Class({
    constructor: function() {

    }
  });
}

function ContactsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/contacts/contacts.html"
  }).Class({
    constructor: function() {

    }
  });
}

function CoreFeaturesPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/core-features/core-features.html"
  }).Class({
    constructor: function() {

    }
  });
}

function FloatingButtonDialPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/floating-button/floating-button-dial.html"
  }).Class({
    constructor: function() {

    }
  });
}


function FloatingButtonPopoverPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/floating-button/floating-button-popover.html"
  }).Class({
    constructor: function() {

    }
  });
}

function FloatingButtonStaticPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/floating-button/floating-button-static.html"
  }).Class({
    constructor: function() {

    }
  });
}

function FloatingButtonPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/floating-button/floating-button.html"
  }).Class({
    constructor: function() {

    }
  });
}

function FormsButtonsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/forms/forms-buttons.html"
  }).Class({
    constructor: function() {

    }
  });
}

function FormsCheckboxesPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/forms/forms-checkboxes.html"
  }).Class({
    constructor: function() {

    }
  });
}

function FormsElementsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/forms/forms-elements.html"
  }).Class({
    constructor: function() {

    }
  });
}

function FormsSelectsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/forms/forms-selects.html"
  }).Class({
    constructor: function() {

    }
  });
}

function FormsStoragePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/forms/forms-storage.html"
  }).Class({
    constructor: function() {

    }
  });
}

function FormsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/forms/forms.html"
  }).Class({
    constructor: function() {

    }
  });
}

function GridPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/grid/grid.html"
  }).Class({
    constructor: function() {

    }
  });
}

function HomePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/home/home.html"
  }).Class({
    constructor: function() {
      this.title = "Framework7 Angular2";
      this.userName = "test";
    }
  });
}

function InfiniteScrollPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/infinite-scroll/infinite-scroll.html"
  }).Class({
    constructor: function() {

    }
  });
}

function LazyLoadPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/lazy-load/lazy-load.html"
  }).Class({
    constructor: function() {

    }
  });
}

function ListViewPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/list-view/list-view.html"
  }).Class({
    constructor: function() {

    }
  });
}

function LoginScreenEmbeddedPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/login-screen/login-screen-embedded.html"
  }).Class({
    constructor: function() {

    }
  });
}

function LoginScreenPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/login-screen/login-screen.html"
  }).Class({
    constructor: function() {

    }
  });
}

function MediaListPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/media-lists/media-lists.html"
  }).Class({
    constructor: function() {

    }
  });
}

function MessagesPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/messages/messages.html"
  }).Class({
    constructor: function() {

    }
  });
}

function ModalsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/modals/modals.html"
  }).Class({
    constructor: function() {

    }
  });
}

function NotificationsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/notifications/notifications.html"
  }).Class({
    constructor: function() {

    }
  });
}

function PanelLeftPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/panels/panel-left.html"
  }).Class({
    constructor: function() {

    }
  });
}

function PanelRightPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/panels/panel-right.html"
  }).Class({
    constructor: function() {

    }
  });
}

function PanelRight2PageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/panels/panel-right2.html"
  }).Class({
    constructor: function() {

    }
  });
}

function PanelRight3PageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/panels/panel-right3.html"
  }).Class({
    constructor: function() {

    }
  });
}

function PanelsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/panels/panels.html"
  }).Class({
    constructor: function() {

    }
  });
}

function PhotoBrowserPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/photo-browser/photo-browser.html"
  }).Class({
    constructor: function() {

    }
  });
}

function PickerPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/picker/picker.html"
  }).Class({
    constructor: function() {

    }
  });
}

function PopoverPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/popover/popover.html"
  }).Class({
    constructor: function() {

    }
  });
}

function PreloaderPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/preloader/preloader.html"
  }).Class({
    constructor: function() {

    }
  });
}

function ProgressBarPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/progressbar/progressbar.html"
  }).Class({
    constructor: function() {

    }
  });
}

function PullToRefreshPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/pull-to-refresh/pull-to-refresh.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SearchbarPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/searchbar/searchbar.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SortableListPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/sortable-list/sortable-list.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwipeDeletePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swipe-delete.html"
  }).Class({
    constructor: function() {

    }
  });
}

function Swiper3DCoverflowPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-3d-coverflow.html"
  }).Class({
    constructor: function() {

    }
  });
}

function Swiper3DCubePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-3d-cube.html"
  }).Class({
    constructor: function() {

    }
  });
}

function Swiper3dFlipPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-3d-flip.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperControlPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-control.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperCustomPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-custom.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperFadePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-fade.html"
  }).Class({
    constructor: function() {

    }
  });
}

 function SwiperGalleryPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-gallery.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperHorizontalPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-horizontal.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperLoopPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-loop.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperMultiplePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-multiple.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperNestedPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-nested.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperPaginationFractionPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-pagination-fraction.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperPaginationProgressPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-pagination-progress.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperParallaxPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-parallax.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperScrollbarPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-scrollbar.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperSpaceBetweenPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-space-between.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperVerticlePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper-vertical.html"
  }).Class({
    constructor: function() {

    }
  });
}

function SwiperPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/swiper/swiper.html"
  }).Class({
    constructor: function() {

    }
  });
}

function TabsAnimatedPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/tabs/tabs-animated.html"
  }).Class({
    constructor: function() {

    }
  });
}

function TabsStaticPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/tabs/tabs-static.html"
  }).Class({
    constructor: function() {

    }
  });
}

function TabsSwipeablePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/tabs/tabs-swipeable.html"
  }).Class({
    constructor: function() {

    }
  });
}

function TabsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/tabs/tabs.html"
  }).Class({
    constructor: function() {

    }
  });
}

function VirtualListPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/virtual-list/virtual-list.html"
  }).Class({
    constructor: function() {

    }
  });
}
