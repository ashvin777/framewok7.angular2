function initialize() {

  window.application = new Framework7({
    modalTitle: 'Framework7',
    material: true,
    pushState: true
  });

  var LibModule = ng.core.NgModule({
    imports: [ng.forms.FormsModule]
  }).Class({
    constructor: function() {

    }
  });

  var BodyComponent = ng.core.Component({
    selector: 'body',
    template: '<router-outlet></router-outlet>'
  }).Class({
    constructor: function() {}
  });

  var MainModule = ng.core.NgModule({
      imports: [
        ng.platformBrowser.BrowserModule,
        LibModule,
        Router()
      ],
      declarations: [
        BodyComponent,
        MainLayoutComponent(),
        HomePageComponent(),
        AboutPageComponent(),
        AccordionPageComponent(),
        AutoCompletePageComponent(),
        CalendarPageComponent(),
        CardsPageComponent(),
        ContactsPageComponent(),
        ChipsPageComponent(),
        FloatingButtonPageComponent(),
        FloatingButtonStaticPageComponent(),
        FloatingButtonPopoverPageComponent(),
        FloatingButtonDialPageComponent(),
        Autocomplete(),
        Calendar()
      ],
      bootstrap: [BodyComponent],
      providers: []
    })
    .Class({
      constructor: function() {}
    });

  ng.platformBrowserDynamic
    .platformBrowserDynamic()
    .bootstrapModule(MainModule);
}
document.addEventListener('DOMContentLoaded', initialize);

function Router() {
  return ng.router.RouterModule.forRoot([{
    path: '',
    redirectTo: 'home',
    pathMatch: 'full'
  },{
    path: '',
    component: MainLayoutComponent(),
    children: [{
      path: 'home',
      component: HomePageComponent()
    },{
      path: 'about',
      component: AboutPageComponent()
    },{
      path: 'accordion',
      component: AccordionPageComponent()
    },{
      path: 'autocomplete',
      component: AutoCompletePageComponent()
    },{
      path: 'calendar',
      component: CalendarPageComponent()
    },{
      path: 'cards',
      component: CardsPageComponent()
    },{
      path: 'contacts',
      component: ContactsPageComponent()
    },{
      path: 'chips',
      component: ChipsPageComponent()
    },{
      path: 'floating-button',
      component: FloatingButtonPageComponent()
    },{
      path: 'floating-button-static',
      component: FloatingButtonStaticPageComponent()
    },{
      path: 'floating-button-popover',
      component: FloatingButtonPopoverPageComponent()
    },{
      path: 'floating-button-dial',
      component: FloatingButtonDialPageComponent()
    }]
  }], {
    useHash: true
  });
}



function NavIgnore() {
  return ng.core.Directive({
    selector: "[navIgnore]",
    host: { // tslint:disable-line:use-host-property-decorator
      '(click)': 'handleClick($event)',
    }
  }).Class({
    constructor: [ng.router.Router, function(router) {
      this.router = router;
    }],
    handleClick: function functionName($event) {
      var subscription = this.router.events.subscribe(function(routerEvent) {
        console.log(routerEvent);
        if (routerEvent instanceof ng.router.NavigationEnd) {
          subscription.unsubscribe();
        } else if (routerEvent instanceof ng.router.NavigationError || routerEvent instanceof ng.router.NavigationCancel) {
          subscription.unsubscribe();
        }
      });
      return false;
    }
  });
}

function Autocomplete() {
  return ng.core.Directive({
    selector: "[autocomplete]",
    inputs: ["autocomplete"]
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element.nativeElement;
    }],
    ngOnInit: function() {
      if (this.$element.tagName.toLowerCase() == 'input') {
        this.autocomplete.input = this.$element;
      } else {
        this.autocomplete.opener = this.$element;
      };
      window.application.autocomplete(this.autocomplete);
    },
  });
}

function Calendar() {
  return ng.core.Directive({
    selector: "[calendar]",
    inputs: ["calendar"]
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element.nativeElement;
    }],
    ngOnInit: function() {
      if (this.$element.tagName.toLowerCase() == 'input') {
        this.calendar.input = this.$element;
      } else {
        this.calendar.container = this.$element;
      };
      window.application.calendar(this.calendar);
    },
  });
}

function MainLayoutComponent() {
  return ng.core.Component({
    templateUrl: "src/layout/main-layout/main-layout.html"
  }).Class({
    constructor: function() {

    },
    ngAfterViewInit: function() {
      window.application.addView('.view-main', {});
    }
  });
}

function AboutPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/about/about.html"
  }).Class({
    constructor: function() {

    }
  });
}

function AccordionPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/accordion/accordion.html"
  }).Class({
    constructor: function() {

    }
  });
}

function AutoCompletePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/autocomplete/autocomplete.html"
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element;
      this.fruits = ('Apple Apricot Avocado Banana Melon Orange Peach Pear Pineapple').split(' ');

      this.simpleAutocomplete = {
        openIn: 'dropdown',
        source: this.simpleAutocompleteSource.bind(this)
      };

      this.autocompleteDropdownAll = {
        openIn: 'dropdown',
        source: this.autocompleteDropdownAllSource.bind(this)
      };

      this.autocompleteDropdownPlaceholder = {
        openIn: 'dropdown',
        dropdownPlaceholderText: 'Try to type "Apple"',
        source: this.autocompleteDropdownPlaceholderSource.bind(this)
      };

      this.autocompleteDropdownAjax = {
        openIn: 'dropdown',
        preloader: true, //enable preloader
        valueProperty: 'id', //object's "value" property name
        textProperty: 'name', //object's "text" property name
        limit: 20, //limit to 20 results
        dropdownPlaceholderText: 'Try "JavaScript"',
        source: this.autocompleteDropdownAjaxSource.bind(this)
      };

      this.autocompleteStandaloneSimple = {
        openIn: 'popup', //open in page
        backOnSelect: true, //go back after we select something
        source: this.autocompleteStandaloneSimpleSource.bind(this),
        onChange: this.autocompleteStandaloneSimpleOnChange.bind(this)
      };

      // Standalone Popup
      this.autocompleteStandalonePopup = {
        openIn: 'popup', //open in page
        backOnSelect: true, //go back after we select something
        source: this.autocompleteStandalonePopupSource.bind(this),
        onChange: this.autocompleteStandalonePopupOnChange.bind(this)
      };

      // Multiple Standalone
      this.autocompleteStandaloneMultiple = {
        openIn: 'popup', //open in page
        multiple: true, //allow multiple values
        source: this.autocompleteStandaloneMultipleSource.bind(this),
        onChange: this.autocompleteStandaloneMultipleOnChange.bind(this)
      };

      // Standalone With Ajax
      this.autocompleteStandaloneAjax = {
        openIn: 'popup', //open in page
        multiple: true, //allow multiple values
        valueProperty: 'id', //object's "value" property name
        textProperty: 'name', //object's "text" property name
        limit: 50,
        preloader: true, //enable preloader
        preloaderColor: 'white', //preloader color
        source: this.autocompleteStandaloneAjaxSource.bind(this),
        onChange: this.autocompleteStandaloneAjaxOnChange.bind(this)
      };
    }],
    simpleAutocompleteSource: function(autocomplete, query, render) {
      this.fruits = ('Apple Apricot Avocado Banana Melon Orange Peach Pear Pineapple').split(' ');
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Find matched items
      for (var i = 0; i < this.fruits.length; i++) {
        if (this.fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(this.fruits[i]);
      }
      // Render items by passing array with result items
      render(results);
    },
    autocompleteDropdownAllSource: function(autocomplete, query, render) {
      this.fruits = ('Apple Apricot Avocado Banana Melon Orange Peach Pear Pineapple').split(' ');
      var results = [];
      // Find matched items
      for (var i = 0; i < this.fruits.length; i++) {
        if (this.fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(this.fruits[i]);
      }
      // Render items by passing array with result items
      render(results);
    },
    autocompleteDropdownPlaceholderSource: function(autocomplete, query, render) {
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Find matched items
      for (var i = 0; i < this.fruits.length; i++) {
        if (this.fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(this.fruits[i]);
      }
      // Render items by passing array with result items
      render(results);
    },
    autocompleteDropdownAjaxSource: function(autocomplete, query, render) {
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Show Preloader
      autocomplete.showPreloader();
      // Do Ajax request to Autocomplete data
      Dom7.ajax({
        url: 'js/autocomplete-languages.json',
        method: 'GET',
        dataType: 'json',
        //send "query" to server. Useful in case you generate response dynamically
        data: {
          query: query
        },
        success: function(data) {
          // Find matched items
          for (var i = 0; i < data.length; i++) {
            if (data[i].name.toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(data[i]);
          }
          // Hide Preoloader
          autocomplete.hidePreloader();
          // Render items by passing array with result items
          render(results);
        }
      });
    },
    autocompleteStandaloneSimpleSource: function(autocomplete, query, render) {
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Find matched items
      for (var i = 0; i < this.fruits.length; i++) {
        if (this.fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(this.fruits[i]);
      }
      // Render items by passing array with result items
      render(results);
    },
    autocompleteStandaloneSimpleOnChange: function(autocomplete, value) {

      // console.log( autocomplete.opener );
      // Add item text value to item-after
      autocomplete.opener.find('.item-after').text(value[0]);
      // Add item value to input value
      autocomplete.opener.find('input').val(value[0]);
    },
    autocompleteStandalonePopupSource: function(autocomplete, query, render) {
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Find matched items
      for (var i = 0; i < this.fruits.length; i++) {
        if (this.fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(this.fruits[i]);
      }
      // Render items by passing array with result items
      render(results);
    },
    autocompleteStandalonePopupOnChange: function(autocomplete, value) {
      // Add item text value to item-after
      autocomplete.opener.find('.item-after').text(value[0]);
      // Add item value to input value
      autocomplete.opener.find('input').val(value[0]);
    },
    autocompleteStandaloneMultipleSource: function(autocomplete, query, render) {
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Find matched items
      for (var i = 0; i < this.fruits.length; i++) {
        if (this.fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(this.fruits[i]);
      }
      // Render items by passing array with result items
      render(results);
    },
    autocompleteStandaloneMultipleOnChange: function(autocomplete, value) {
      // Add item text value to item-after
      autocomplete.opener.find('.item-after').text(value.join(', '));
      // Add item value to input value
      autocomplete.opener.find('input').val(value.join(', '));
    },
    autocompleteStandaloneAjaxSource: function(autocomplete, query, render) {
      var results = [];
      if (query.length === 0) {
        render(results);
        return;
      }
      // Show Preloader
      autocomplete.showPreloader();
      // Do Ajax request to Autocomplete data
      Dom7.ajax({
        url: 'js/autocomplete-languages.json',
        method: 'GET',
        dataType: 'json',
        //send "query" to server. Useful in case you generate response dynamically
        data: {
          query: query
        },
        success: function(data) {
          // Find matched items
          for (var i = 0; i < data.length; i++) {
            if (data[i].name.toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(data[i]);
          }
          // Hide Preoloader
          autocomplete.hidePreloader();
          // Render items by passing array with result items
          render(results);
        }
      });
    },
    autocompleteStandaloneAjaxOnChange: function(autocomplete, value) {
      var itemText = [],
        inputValue = [];
      for (var i = 0; i < value.length; i++) {
        itemText.push(value[i].name);
        inputValue.push(value[i].id);
      }
      // Add item text value to item-after
      autocomplete.opener.find('.item-after').text(itemText.join(', '));
      // Add item value to input value
      autocomplete.opener.find('input').val(inputValue.join(', '));
    }
  });
}


function CalendarPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/calendar/calendar.html"
  }).Class({
    constructor: function() {
      this.monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

      this.calendarDefault = {};

      this.calendarDateFormat = {
        dateFormat: 'DD, MM dd, yyyy'
      };

      this.calendarMultiple = {
        dateFormat: 'M dd yyyy',
        multiple: true
      };
      this.calendarRange = {
        dateFormat: 'M dd yyyy',
        rangePicker: true
      };

      this.calendarInline = {
        value: [new Date()],
        weekHeader: false,
        header: false,
        footer: false,
        toolbarTemplate: this.getToolbarTemplate(),
        onOpen: this.onOpen.bind(this),
        onMonthYearChangeStart: this.onMonthYearChangeStart.bind(this)
      };
    },
    getToolbarTemplate: function() {
      return '<div class="toolbar calendar-custom-toolbar">' +
        '<div class="toolbar-inner">' +
        '<div class="left">' +
        '<a href="#" class="link icon-only"><i class="icon icon-back"></i></a>' +
        '</div>' +
        '<div class="center"></div>' +
        '<div class="right">' +
        '<a href="#" class="link icon-only"><i class="icon icon-forward"></i></a>' +
        '</div>' +
        '</div>' +
        '</div>';
    },
    onOpen: function(p) {
      Dom7('.calendar-custom-toolbar .center').text(this.monthNames[p.currentMonth] + ', ' + p.currentYear);
      Dom7('.calendar-custom-toolbar .left .link').on('click', function() {
        p.prevMonth();
      });
      Dom7('.calendar-custom-toolbar .right .link').on('click', function() {
        p.nextMonth();
      });
    },
    onMonthYearChangeStart: function(p) {
      Dom7('.calendar-custom-toolbar .center').text(this.monthNames[p.currentMonth] + ', ' + p.currentYear);
    }
  })
}

function CardsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/cards/cards.html"
  }).Class({
    constructor: function() {}
  })
}

function ChipsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/chips/chips.html"
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element.nativeElement;
    }],
    ngAfterViewInit: function() {
      Dom7(this.$element).find('.chip-delete').on('click', function(e) {
        e.preventDefault();
        var chip = Dom7(this).parents('.chip');
        window.application.confirm('Do you want to delete this tiny demo Chip?', function() {
          chip.remove();
        });
      });
    }
  });
}

function ContactsPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/contacts/contacts.html"
  }).Class({
    constructor: function() {

    }
  });
}

function FloatingButtonDialPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/floating-button/floating-button-dial.html"
  }).Class({
    constructor: function() {

    }
  });
}


function FloatingButtonPopoverPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/floating-button/floating-button-popover.html"
  }).Class({
    constructor: function() {

    }
  });
}

function FloatingButtonStaticPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/floating-button/floating-button-static.html"
  }).Class({
    constructor: function() {

    }
  });
}

function FloatingButtonPageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/floating-button/floating-button.html"
  }).Class({
    constructor: function() {

    }
  });
}

function HomePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/home/home.html"
  }).Class({
    constructor: function() {
      this.title = "Framework7 Angular2";
      this.userName = "test";
    }
  });
}
